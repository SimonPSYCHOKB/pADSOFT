package GUI;

import java.awt.*;
import java.util.*;

import javax.swing.*;
import javax.swing.event.*;

import Test.*;

public class EditTest extends JFrame{

	private static final long serialVersionUID = 1L;
	
//	myField.addFocusListener(new FocusListener() {
//	    public void focusGained(FocusEvent e) {
//	        myField.setText("");
//	    }
//
//	    public void focusLost(FocusEvent e) {
//	        // nothing
//	    }
//	});

	public EditTest(final Exercise e){
		// Setting layout
		SpringLayout layout = new SpringLayout();
		setLayout(layout);
		
		// Date of Beginning
		JLabel start = new JLabel("Date of beginning");
		SpinnerModel sm1 = new SpinnerDateModel(e.getDateOfBegining(), null, null, Calendar.DAY_OF_MONTH);
		final JSpinner spinner1 = new JSpinner(sm1);
		layout.putConstraint(SpringLayout.NORTH, start, 50, SpringLayout.NORTH, this);
		layout.putConstraint(SpringLayout.WEST, start, 250, SpringLayout.WEST, this);
		add(start);
		layout.putConstraint(SpringLayout.NORTH, spinner1, 50, SpringLayout.NORTH, this);
		layout.putConstraint(SpringLayout.WEST, spinner1, 30, SpringLayout.EAST, start);
		add(spinner1);
		
		spinner1.addChangeListener(new ChangeListener(){
			@Override
			public void stateChanged(ChangeEvent arg0) {
			    e.editDateOfBegining((Date) (spinner1.getValue()));
			    System.out.println(e.getDateOfBegining().toString());
			}
		});
		
		// Date of End
		JLabel end = new JLabel("Date of end");
		SpinnerDateModel sm2 = new SpinnerDateModel();
		final JSpinner spinner2 = new JSpinner(sm2);
		JSpinner.DateEditor de = new JSpinner.DateEditor(spinner2, "dd/mm/yy");
		de.getTextField().setEditable(true);
		spinner2.setEditor(de);
		layout.putConstraint(SpringLayout.NORTH, end, 20, SpringLayout.SOUTH, start);
		layout.putConstraint(SpringLayout.WEST, end, 250, SpringLayout.WEST, this);
		add(end);
		layout.putConstraint(SpringLayout.NORTH, spinner2, 15, SpringLayout.SOUTH, spinner1);
		layout.putConstraint(SpringLayout.WEST, spinner2, 75, SpringLayout.EAST, end);
		add(spinner2);
		
		spinner2.addChangeListener(new ChangeListener(){
			@Override
			public void stateChanged(ChangeEvent arg0) {
			    e.editDateOfEnd((Date) (spinner2.getValue()));
			    System.out.println(e.getDateOfEnd().toString());
			}
		});
		
		//Weigth
		JLabel weight = new JLabel("Weight");
		SpinnerModel sm3 = new SpinnerNumberModel(e.getWeight(), 0, 100, 0.1);
		final JSpinner spinner3 = new JSpinner(sm3);
		layout.putConstraint(SpringLayout.NORTH, weight, 20, SpringLayout.SOUTH, end);
		layout.putConstraint(SpringLayout.WEST, weight, 250, SpringLayout.WEST, this);
		add(weight);
		layout.putConstraint(SpringLayout.NORTH, spinner3, 15, SpringLayout.SOUTH, spinner2);
		layout.putConstraint(SpringLayout.WEST, spinner3, 106, SpringLayout.EAST, weight);
		add(spinner3);
		
		spinner3.addChangeListener(new ChangeListener(){
			@Override
			public void stateChanged(ChangeEvent arg0) {
				e.setWeigth((double) spinner3.getValue());
			}
		});
		
		//Weigth
		JLabel visibility = new JLabel("Visible");
		JCheckBox ok = new JCheckBox();
		layout.putConstraint(SpringLayout.NORTH, visibility, 20, SpringLayout.SOUTH, weight);
		layout.putConstraint(SpringLayout.WEST, visibility, 250, SpringLayout.WEST, this);
		add(visibility);
		layout.putConstraint(SpringLayout.NORTH, ok, 15, SpringLayout.SOUTH, spinner3);
		layout.putConstraint(SpringLayout.WEST, ok, 106, SpringLayout.EAST, visibility);
		add(ok);
		
		
		setSize(800, 400);
		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
		setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
		
		setVisible(true);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	}
	
}
