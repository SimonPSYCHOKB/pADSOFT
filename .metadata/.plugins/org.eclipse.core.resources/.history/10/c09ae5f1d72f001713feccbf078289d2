package application;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import Test.Exercise;

/**
 * @author Simon Valcarcel
 * @author Blanca Martin
 * 
 * This class contains the information of a Course
 *
 */
public class Course implements Serializable{
	
	private static final long serialVersionUID = 1L;
	
	private boolean visibility;
	private String title;
	private String description;
	private List<Unit> units; 
	private List<Exercise> tests;
	private double total;

	/**
	 * This method returns whether a Course if visible
	 * @return true if it is visible, false if not
	 */
	public boolean isVisibility() {
		return visibility;
	}
	
	/**
	 * This method returns the total points of the Exercises in the Course
	 * @return total
	 */
	public double getTotal(){
		return total;
	}
	
	/**
	 * This method returns the title of a Course
	 * @return title
	 */
	public String getTitle() {
		return title;
	}
	
	/**
	 * This method returns the Exercises in a Course 
	 * @return tests - List of Exercise
	 */
	public List<Exercise> getTests(){
		return tests;
	}

	/**
	 * This method returns the description of a Course
	 * @return description
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * This method returns the Units of a Course
	 * @return units - List of Unit
	 */
	public List<Unit> getUnits(){
		return units;
	}
	
	/**
	 * Constructor
	 * @param visibility - boolean that sets whether the Course is visible
	 * @param title - String with the title
	 * @param description - String with the description
	 */
	public Course(boolean visibility, String title, String description) {
		this.visibility = visibility;
		this.title = title;
		this.description = description;
		units = new ArrayList<Unit>();
		tests = new ArrayList<Exercise>();
		total = 0;
	}
	
	/**
	 * This method adds an Exercise to the Course
	 * @param t - The Exercise to be added
	 */
	public void addTest(Exercise t){
		tests.add(t);
		t.setCourse(this);
		//We actualize the value of the total in the Course
		total = total + t.getWeight();
	}

	@Override
	public String toString(){
		String str = title;
		for (Unit u: units){
			str += "\n" + "\t"+ u.toString();
		}
		return str;
	}

	/**
	 * This method removes the unit from the course
	 * @param u - The Unit we want to remove
	 */
	public void deleteUnit(Unit u){
		units.remove(u);
	}
	
	/**
	 * This method adds a unit to a course
	 * @param u - The Unit to be added
	 */
	public void addUnit(Unit u){
		units.add(u);
		u.setCourse(this);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Course other = (Course) obj;
		if (description == null) {
			if (other.description != null)
				return false;
		} else if (!description.equals(other.description))
			return false;
		if (tests == null) {
			if (other.tests != null)
				return false;
		} else if (!tests.equals(other.tests))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		if (Double.doubleToLongBits(total) != Double
				.doubleToLongBits(other.total))
			return false;
		if (units == null) {
			if (other.units != null)
				return false;
		} else if (!units.equals(other.units))
			return false;
		if (visibility != other.visibility)
			return false;
		return true;
	}
	
	

}
