package gui.panels;

import exercise.Exercise;
import gui.panels.controllers.AddExerciseController;
import gui.panels.controllers.AddNotesController;
import gui.panels.controllers.AddSubunitController;
import gui.panels.controllers.ExerciseController;
import gui.panels.controllers.NotesController;
import gui.windows.General;

import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.font.TextAttribute;
import java.util.HashMap;
import java.util.Map;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import application.Application;
import application.Note;
import application.Unit;


public class UIUnitEditable extends JScrollPane{

	private static final long serialVersionUID = 1L;
	private JButton exercise;
	private JButton subunit;
	private JButton notes;

	public UIUnitEditable(final Unit u, final Application app, final General gen){
				
		//Layout for the main panel
		JPanel root = new JPanel();
		root.setLayout( new GridBagLayout());
		GridBagConstraints gbc = new GridBagConstraints();
		
		JPanel unit = new JPanel();
		unit.setLayout(new BoxLayout(unit, BoxLayout.PAGE_AXIS));
		
		for(Note n : u.getNotes()){
			JTextArea note = new JTextArea(n.toString());
			note.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			note.addMouseListener(new NotesController(n, gen, app));
			
			unit.add(note);
		}
		int i = 0;
		for(final Exercise e : u.getTests()){
			JLabel test = new JLabel("Exercise " + i);
			Font font = test.getFont();
			Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());
			attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
			test.setFont(font.deriveFont(attributes));
			test.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			test.addMouseListener(new ExerciseController(app, e, gen));

			unit.add(test);
			i += 1;
		}
	
		for(Unit ss : u.getSubUnits()){
			UIUnitEditable sube = new UIUnitEditable(ss, app, gen);
			final JPanel rootSub = new JPanel(new FlowLayout());
			rootSub.setBorder(BorderFactory.createTitledBorder(ss.getName()));
			rootSub.add(sube);

			unit.add(rootSub);
		}

		//Buttons for editing
		JPanel buttons = new JPanel(new FlowLayout());
		exercise = new JButton("Create new exercise");
		subunit = new JButton("Create new subunit");
		notes = new JButton("Create new notes");
		buttons.add(exercise);
		buttons.add(subunit);
		buttons.add(notes);
		buttons.setVisible(true);
		
		exercise.addActionListener(new AddExerciseController(u, app, gen));
		subunit.addActionListener(new AddSubunitController(u, app, gen));
		notes.addActionListener(new AddNotesController(u, app, gen));

		unit.setVisible(true);

		gbc.gridy = 0;
        gbc.gridx = 1;
        gbc.anchor = GridBagConstraints.BOTH;
		gbc.gridwidth = GridBagConstraints.REMAINDER;
		root.add(buttons);
		
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.fill = 3;
		gbc.anchor = GridBagConstraints.BOTH;
		gbc.gridwidth = GridBagConstraints.REMAINDER;
        root.add(unit);

		root.setVisible(true);
		
		this.setViewportView(root);
		setPreferredSize(new Dimension(1000, 200));
		setBorder(BorderFactory.createEmptyBorder());
		this.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		this.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);

	}
	
//	public void setControllerExercise(ActionListener al){
//		exercise.addActionListener(al);
//	}
//	
//	public void setControllerSubunit(ActionListener al){
//		subunit.addActionListener(al);
//	}
//	
//	public void setControllerNotes(ActionListener al){
//		notes.addActionListener(al);
//	}
}
