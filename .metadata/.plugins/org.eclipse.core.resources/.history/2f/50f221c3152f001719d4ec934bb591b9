package GUI.Windows;

import java.awt.*;
import java.awt.event.*;
import java.util.Calendar;
import java.util.List;
import java.util.Date;
import java.util.ArrayList;

import javax.swing.*;
import javax.swing.event.*;

import GUI.Panels.EditQuestion;
import Test.*;

public class EditTest extends JFrame{

	private static final long serialVersionUID = 1L;
	private JButton close;
	private List<EditQuestion> quest;
	private Exercise e;
	
	private JSpinner spinner1;
	private JSpinner spinner2;
	private JSpinner spinner3;
	private JCheckBox ok;

	public EditTest(final Exercise e){
		this.e = e;
		final JFrame dispose = this;
		this.setLayout(new BoxLayout(getContentPane(), BoxLayout.PAGE_AXIS));
		quest = new ArrayList<EditQuestion>();
		JPanel test = new JPanel();
		// Setting layout
		SpringLayout layout = new SpringLayout();
		test.setLayout(layout);
		
		// Date of Beginning
		JLabel start = new JLabel("Date of beginning");
		SpinnerModel sm1;
		if(e != null)
			sm1 = new SpinnerDateModel(e.getDateOfBegining(), null, null, Calendar.DAY_OF_MONTH);
		else
			sm1 = new SpinnerDateModel(new Date(), null, null, Calendar.DAY_OF_MONTH);
		spinner1 = new JSpinner(sm1);
		layout.putConstraint(SpringLayout.NORTH, start, 50, SpringLayout.NORTH, test);
		layout.putConstraint(SpringLayout.WEST, start, 250, SpringLayout.WEST, test);
		test.add(start);
		layout.putConstraint(SpringLayout.NORTH, spinner1, 50, SpringLayout.NORTH, test);
		layout.putConstraint(SpringLayout.WEST, spinner1, 30, SpringLayout.EAST, start);
		test.add(spinner1);
		
		spinner1.addChangeListener(new ChangeListener(){
			@Override
			public void stateChanged(ChangeEvent arg0) {
			    e.editDateOfBegining((Date) (spinner1.getValue()));
//			    System.out.println(e.getDateOfBegining().toString());
			}
		});
		
		// Date of End
		JLabel end = new JLabel("Date of end");
		SpinnerDateModel sm2;
		if(e != null)
			sm2 = new SpinnerDateModel(e.getDateOfEnd(), null, null, Calendar.DAY_OF_MONTH);
		else
			sm2 = new SpinnerDateModel(new Date(), null, null, Calendar.DAY_OF_MONTH);

		spinner2 = new JSpinner(sm2);
		layout.putConstraint(SpringLayout.NORTH, end, 20, SpringLayout.SOUTH, start);
		layout.putConstraint(SpringLayout.WEST, end, 250, SpringLayout.WEST, test);
		test.add(end);
		layout.putConstraint(SpringLayout.NORTH, spinner2, 15, SpringLayout.SOUTH, spinner1);
		layout.putConstraint(SpringLayout.WEST, spinner2, 75, SpringLayout.EAST, end);
		test.add(spinner2);
		
		spinner2.addChangeListener(new ChangeListener(){
			@Override
			public void stateChanged(ChangeEvent arg0) {
			    e.editDateOfEnd((Date) (spinner2.getValue()));
//			    System.out.println(e.getDateOfEnd().toString());
			}
		});
		
		//Weigth
		JLabel weight = new JLabel("Weight");
		SpinnerModel sm3 = new SpinnerNumberModel(e.getWeight(), 0, 100, 0.1);
		
			sm3 = new SpinnerNumberModel(0, 0, 100, 0.1);
		spinner3 = new JSpinner(sm3);
		layout.putConstraint(SpringLayout.NORTH, weight, 20, SpringLayout.SOUTH, end);
		layout.putConstraint(SpringLayout.WEST, weight, 250, SpringLayout.WEST, test);
		test.add(weight);
		layout.putConstraint(SpringLayout.NORTH, spinner3, 15, SpringLayout.SOUTH, spinner2);
		layout.putConstraint(SpringLayout.WEST, spinner3, 106, SpringLayout.EAST, weight);
		test.add(spinner3);
		
		spinner3.addChangeListener(new ChangeListener(){
			@Override
			public void stateChanged(ChangeEvent arg0) {
				e.setWeigth((double) spinner3.getValue());
			}
		});
		
		//Visibility
		JLabel visibility = new JLabel("Visible");
		ok = new JCheckBox();
		ok.setSelected(e.isVisibility());
		layout.putConstraint(SpringLayout.NORTH, visibility, 20, SpringLayout.SOUTH, weight);
		layout.putConstraint(SpringLayout.WEST, visibility, 250, SpringLayout.WEST, test);
		test.add(visibility);
		layout.putConstraint(SpringLayout.NORTH, ok, 15, SpringLayout.SOUTH, spinner3);
		layout.putConstraint(SpringLayout.WEST, ok, 106, SpringLayout.EAST, visibility);
		test.add(ok);
		
		ok.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				e.setVisibility(ok.isSelected());
			}
		});
		
		//Add Question
		JButton add = new JButton("Add Question");
		layout.putConstraint(SpringLayout.NORTH, add, 40, SpringLayout.SOUTH, visibility);
		layout.putConstraint(SpringLayout.WEST, add, 350, SpringLayout.WEST, test);
		test.add(add);
		
		add.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				new CreateQuestion(e);
			}			
		});
		
		add(test);
		
		//The questions
		JTabbedPane questions = new JTabbedPane();
		questions.setTabLayoutPolicy(JTabbedPane.WRAP_TAB_LAYOUT);
		int i = 0;
		for(Question q : e.getQuestions()){
			EditQuestion eq = new EditQuestion(q);
			quest.add(eq);
			questions.addTab("Question "+i, eq);
			i = i + 1;
		}
		questions.setVisible(true);
		questions.setMinimumSize(new Dimension(800,300));
		add(questions);
	
		//Button
		close = new JButton("Save");	
		add(close);
		
		close.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				dispose.dispose();
			}	
		});
		
		setSize(800, 600);
		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
		setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
		
		setVisible(true);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	}
	
	public void setController(ActionListener al){
		close.addActionListener(al);
	}
	
	public List<EditQuestion> getQuestions(){
		return quest;
	}
	
	public Exercise getExercise(){
		return e;
	}
	
	public JSpinner getWeigth(){
		return spinner3;
	}
	
	public JSpinner getDateEnd(){
		return spinner2;
	}
	
	public JSpinner getDateBegining(){
		return spinner1;
	}	
	
}
